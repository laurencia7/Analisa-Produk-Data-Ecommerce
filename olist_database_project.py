# -*- coding: utf-8 -*-
"""olist-database project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sevfhVg6WyJBS1HhZ4yvRYDlYQT8G2Ct
"""

#https://drive.google.com/file/d/1giqBhW11LO4Th0wXxsl_pVGABtknmg1_/view?usp=sharing
! gdown --id 1giqBhW11LO4Th0wXxsl_pVGABtknmg1_

import sqlite3
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

con = sqlite3.connect("/content/olist.db")
cursor = con.cursor()

# Mendapatkan daftar nama tabel
cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
tables = cursor.fetchall()

# Menampilkan daftar nama tabel
for table in tables:
    print(table[0])

# Fungsi untuk mendapatkan jumlah data pada tabel
def get_data_count(table_name):
    query = f"SELECT COUNT(*) FROM {table_name}"
    cursor.execute(query)
    result = cursor.fetchone()
    count = result[0]
    return count

# Menampilkan jumlah data untuk setiap tabel
for table in tables:
    table_name = table[0]
    count = get_data_count(table_name)
    print(f"Table: {table_name}")
    print(f"Data Count: {count}")
    print()

# Menampilkan nama kolom dan tipe datanya untuk setiap tabel
for table in tables:
    table_name = table[0]
    print(f"Table: {table_name}")
    print("=================================")

    # Mendapatkan daftar kolom dan tipe datanya
    cursor.execute(f"PRAGMA table_info({table_name})")
    columns = cursor.fetchall()

    # Menampilkan nama kolom dan tipe datanya
    for column in columns:
        column_name = column[1]
        column_type = column[2]
        print(f"{column_name}: {column_type}")

    print()

def missing_value(table_name):
    # Mendapatkan data dari tabel ke dalam DataFrame
    df = pd.read_sql_query(f"SELECT * FROM {table_name}", con)

    print(f"Table: {table_name}")
    print("===============================================")

    # Identifikasi NaN (missing values)
    print("Missing Values:")
    print(df.isnull().sum())
    print()

for table in tables:
  table_name = table[0]
  missing_value(table_name)

# Fungsi untuk melakukan identifikasi duplicate data pada tabel
def identify_duplicate_data(table_name, unique_cols):
    # Mendapatkan data dari tabel ke dalam DataFrame
    query = f"SELECT * FROM {table_name}"
    df = pd.read_sql_query(query, con)

    print(f"Table: {table_name}")
    print("=================================")

    if len(unique_cols) > 0:
        if set(unique_cols).issubset(df.columns):
            # Identifikasi duplicate data berdasarkan kolom unik
            duplicate_rows = df[df.duplicated(subset=unique_cols, keep=False)]
            if not duplicate_rows.empty:
                print("Duplicate Data:")
                print(duplicate_rows)
                print()
            else:
                print("No Duplicate Data Found.")
                print()
        else:
            print("One or more unique columns not found in the DataFrame.")
            print()
    else:
        print("No unique columns specified for this table.")
        print()

# Melakukan identifikasi duplicate data pada setiap tabel
for table in tables:
    table_name = table[0]
    if table_name != 'sqlite_sequence':
        if table_name == 'olist_order_customer_dataset':
            unique_cols = ['customer_id']
        elif table_name == 'olist_orders_dataset':
            unique_cols = ['order_id']
        elif table_name == 'olist_order_reviews_dataset':
            unique_cols = ['review_id']
        elif table_name == 'olist_order_payments_dataset':
            unique_cols = ['order_id', 'payment_sequential']  # Update kolom unik
        elif table_name == 'olist_order_items_dataset':
            unique_cols = ['order_id', 'order_item_id']  # Update kolom unik
        elif table_name == 'olist_products_dataset':
            unique_cols = ['product_id']
        elif table_name == 'olist_sellers_dataset':
            unique_cols = ['seller_id']
        elif table_name == 'olist_geolocation_dataset':
            unique_cols = ['geolocation_zip_code_prefix']  # Update kolom unik
        else:
            unique_cols = []

        identify_duplicate_data(table_name, unique_cols)

"""##### Data Cleaning"""

# Menghapus baris dengan missing value pada kolom product_category_name
query = "DELETE FROM olist_products_dataset WHERE product_category_name IS NULL"
cursor.execute(query)

# Menyimpan perubahan
con.commit()

# Query SQL untuk mengambil data produk yang relevan
query = """
SELECT oi.price, op.product_weight_g, op.product_length_cm, op.product_height_cm, op.product_width_cm, op.product_photos_qty
FROM olist_order_items_dataset AS oi
JOIN olist_products_dataset AS op ON oi.product_id = op.product_id
"""

# Membaca data ke dalam DataFrame
df = pd.read_sql_query(query, con)

# Identifikasi outlier pada atribut harga produk
price_outliers = df[(np.abs(df['price'] - df['price'].mean()) > 3 * df['price'].std())]

# Identifikasi outlier pada atribut berat produk
weight_outliers = df[(np.abs(df['product_weight_g'] - df['product_weight_g'].mean()) > 3 * df['product_weight_g'].std())]

# Identifikasi outlier pada atribut dimensi produk
length_outliers = df[(np.abs(df['product_length_cm'] - df['product_length_cm'].mean()) > 3 * df['product_length_cm'].std())]
height_outliers = df[(np.abs(df['product_height_cm'] - df['product_height_cm'].mean()) > 3 * df['product_height_cm'].std())]
width_outliers = df[(np.abs(df['product_width_cm'] - df['product_width_cm'].mean()) > 3 * df['product_width_cm'].std())]

# Identifikasi outlier pada atribut jumlah foto produk
photo_outliers = df[(np.abs(df['product_photos_qty'] - df['product_photos_qty'].mean()) > 3 * df['product_photos_qty'].std())]

# Menampilkan hasil identifikasi outlier
print("Outliers pada atribut harga produk:")
print(price_outliers)
print()

print("Outliers pada atribut berat produk:")
print(weight_outliers)
print()

print("Outliers pada atribut dimensi produk (panjang):")
print(length_outliers)
print()

print("Outliers pada atribut dimensi produk (tinggi):")
print(height_outliers)
print()

print("Outliers pada atribut dimensi produk (lebar):")
print(width_outliers)
print()

print("Outliers pada atribut jumlah foto produk:")
print(photo_outliers)
print()

# Membuat koneksi ke database
con = sqlite3.connect("/content/olist.db")

# Query SQL untuk membaca data dari tabel product_category_name_translation
query = "SELECT * FROM product_category_name_translation"

# Membaca data ke dalam DataFrame
df_translation = pd.read_sql_query(query, con)

# Menampilkan DataFrame
print(df_translation)

# Query SQL untuk menggabungkan tabel-tabel yang relevan
query = """
SELECT oi.order_id, oi.product_id, oi.price, oi.order_item_id, oi.seller_id,
       op.product_category_name, o.order_purchase_timestamp, o.order_status,
       r.review_score
FROM olist_order_items_dataset AS oi
JOIN olist_products_dataset AS op ON oi.product_id = op.product_id
JOIN olist_order_dataset AS o ON oi.order_id = o.order_id
JOIN olist_order_reviews_dataset AS r ON oi.order_id = r.order_id
"""

# Membaca data ke dalam DataFrame
df = pd.read_sql_query(query, con)

df.to_csv(f"processed.csv", index=False)

df.head()

# Menghitung total penjualan berdasarkan kategori produk
category_sales = df.groupby('product_category_name')['price'].sum().sort_values(ascending=False)

# Mengambil 10 kategori produk teratas dengan urutan dari besar ke kecil
top_10_categories = category_sales.head(10)[::-1]

# Visualisasi menggunakan horizontal bar chart
plt.figure(figsize=(10, 6))
top_10_categories.plot(kind='barh')
plt.title('Total Penjualan dari 10 Kategori Produk Teratas')
plt.xlabel('Total Penjualan')
plt.ylabel('Kategori Produk')

# Menambahkan nilai pada setiap bar
for i, v in enumerate(top_10_categories):
    plt.text(v, i, str(v), color='black', ha='left', va='center')
plt.show()

# Menghitung jumlah pesanan atau total penjualan untuk setiap produk
top_products = df['product_category_name'].value_counts().head(10)[::-1]

# Visualisasi menggunakan horizontal bar chart
plt.figure(figsize=(12, 6))
top_products.plot(kind='barh')
plt.title('Produk yang Paling Diminati')
plt.xlabel('Jumlah Pesanan')
plt.ylabel('Produk')

for i, v in enumerate(top_products):
    plt.text(v, i, str(v), color='black', ha='left', va='center')

plt.show()

# Filter data untuk 10 produk yang paling diminati
top_10_products = df['product_category_name'].value_counts().head(10).index
top_10_products_data = df[df['product_category_name'].isin(top_10_products)]

# Mengubah tipe data kolom order_purchase_timestamp menjadi tipe datetime
top_10_products_data['order_purchase_timestamp'] = pd.to_datetime(top_10_products_data['order_purchase_timestamp'])

# Menghitung jumlah pesanan atau total penjualan per bulan untuk setiap produk
monthly_orders = top_10_products_data.groupby(['product_category_name', pd.Grouper(key='order_purchase_timestamp', freq='M')])['order_id'].count().reset_index()

# Mengubah format kategori menjadi "Tahun-Bulan"
monthly_orders['order_purchase_month'] = monthly_orders['order_purchase_timestamp'].dt.strftime('%Y-%b')

# Mengubah kolom order_purchase_month menjadi tipe data datetime
monthly_orders['order_purchase_month'] = pd.to_datetime(monthly_orders['order_purchase_month'], format='%Y-%b')

# Mengurutkan DataFrame berdasarkan kolom order_purchase_month
monthly_orders = monthly_orders.sort_values('order_purchase_month')

# Melakukan pivot table untuk mengubah data menjadi format yang sesuai untuk visualisasi
monthly_orders_pivot = monthly_orders.pivot(index='order_purchase_month', columns='product_category_name', values='order_id')

# Visualisasi menggunakan line chart
plt.figure(figsize=(12, 6))
monthly_orders_pivot.plot(kind='line', marker='o')
plt.title('Pertumbuhan Pemesanan Produk')
plt.xlabel('Waktu')
plt.ylabel('Jumlah Pesanan')
plt.legend(loc='upper left')
plt.xticks(rotation=45)
plt.show()